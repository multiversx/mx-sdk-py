from typing import Any, Dict, List, Protocol, Union


class ISerializable(Protocol):
    def to_dictionary(self) -> Dict[str, Any]: ...


class IAddress(Protocol):
    def bech32(self) -> str: ...


class ITransaction(ISerializable, Protocol):
    def to_dictionary(self) -> Dict[str, Any]: ...


class IPagination(Protocol):
    def get_start(self) -> int: ...

    def get_size(self) -> int: ...


class IContractQuery(Protocol):
    def get_encoded_arguments(self) -> List[str]: ...

    def get_function(self) -> str: ...

    def get_value(self) -> int: ...

    def get_address(self) -> IAddress: ...

    def get_caller(self) -> Union[IAddress, None]: ...
